base_type: INT_TYPE| FLOAT_TYPE| STRING_TYPE| OBJECT_TYPE| REGEXP_TYPE| FUNCTION_TYPE| ANY_TYPE| BOOLEAN_TYPE| TIME_TYPE
list_type: _LIST_KEYWORD _OSB types _CSB
map_type: _MAP_KEYWORD _OSB base_type _COMMA types _CSB
types: list_type | map_type| base_type
boolean: TRUE| FALSE
void: NULL
number: INT| FLOAT
time: RAW_TIME
string: SINGLE_QUOTED| DOUBLE_QUOTED| DOUBLE_QUOTED_HEREDOC
!list: _OSB (_NL _INDENT)? (base_expression (_COMMA _NL? base_expression)*)? (_NL _DEDENT)? _CSB
key_value: (string| path| number| boolean) _COLON base_expression
map: _OCB (_NL _INDENT)? (key_value (_COMMA _NL? key_value)*)? (_NL _DEDENT)? _CCB
regular_expression: REGEXP
inline_expression: _OP inline_service _CP| call_expression
values: number| string| boolean| void| list| map| regular_expression| time
range_start: (number | path) _COLON
range_start_end: (number | path) _COLON (number | path)
range_end: _COLON (number | path)
range: range_start_end | range_start | range_end
path_fragment: _DOT NAME| _OSB (number | string | path | boolean | range) _CSB
path: NAME (path_fragment)* | inline_expression (path_fragment)*
assignment_fragment: EQUALS base_expression
assignment_destructoring: _OCB (_NL _INDENT)? (path (_COMMA _NL? path)*)? (_NL _DEDENT)? _CCB
assignment: (path | assignment_destructoring) assignment_fragment
cmp_operator: GREATER| GREATER_EQUAL| LESSER| LESSER_EQUAL| NOT_EQUAL| EQUAL
arith_operator: PLUS| DASH
unary_operator: NOT
mul_operator: MULTIPLIER| BSLASH| MODULUS
primary_expression: entity | _OP or_expression _CP
output_names: NAME (_COMMA NAME)*
as_operator: _AS (types | output_names)
pow_operator: POWER
dot_arguments: _DOT NAME _OP arguments* _CP
dot_expression: primary_expression dot_arguments*| FLOAT NAME _OP arguments* _CP dot_arguments*
pow_expression: dot_expression (pow_operator unary_expression)?| dot_expression
unary_expression: unary_operator unary_expression | pow_expression
as_expression: unary_expression (as_operator)?
mul_expression: (mul_expression mul_operator)? as_expression
arith_expression: (arith_expression arith_operator)? mul_expression
cmp_expression: (cmp_expression cmp_operator)? arith_expression
and_operator: AND
and_expression: (and_expression and_operator)? cmp_expression
or_operator: OR
or_expression: (or_expression or_operator)? and_expression
expression: or_expression
absolute_expression: expression
base_expression: (expression| inline_service)
return_statement: RETURN base_expression?
break_statement: BREAK
entity: values| path
rules: absolute_expression| assignment| return_statement| throw_statement| break_statement| block
command: NAME
arguments: NAME? _COLON expression
output: (_AS NAME (_COMMA NAME)*)
service_fragment: (command arguments*|arguments+) output?
inline_service_fragment: (command arguments*|arguments+)
service: path service_fragment
service_block: service _NL (nested_block)?
inline_service: path inline_service_fragment
call_expression: path _OP arguments* (_NL _INDENT (arguments _NL?)* _DEDENT)? _CP
if_statement: _IF base_expression
elseif_statement: _ELSE _IF base_expression
elseif_block: elseif_statement _NL nested_block
!else_statement: _ELSE
else_block: else_statement _NL nested_block
if_block: if_statement _NL nested_block elseif_block* else_block?
foreach_statement: _FOREACH base_expression output?
foreach_block: foreach_statement _NL nested_block
while_statement: _WHILE base_expression
while_block: while_statement _NL nested_block
typed_argument: NAME _COLON types
function_output: _RETURNS types
function_statement: FUNCTION_TYPE NAME typed_argument* function_output?
indented_typed_arguments: _INDENT (typed_argument+ _NL)+ _DEDENT _DOUBLE_DEDENT
function_block: function_statement _NL (indented_typed_arguments? block+ _DEDENT | nested_block)
catch_statement: _CATCH _AS NAME
catch_block: catch_statement _NL nested_block
finally_statement: FINALLY
finally_block: finally_statement _NL nested_block
try_statement: TRY
try_block: try_statement _NL nested_block catch_block? finally_block?
throw_statement: THROW entity?
when_service: NAME path (service_fragment | output?)
when_block: _WHEN (when_service | NAME output?) _NL nested_block
indented_arguments: _INDENT (arguments _NL)+ _DEDENT
block: rules _NL| if_block| foreach_block| function_block| arguments| service_block| when_block| try_block| indented_arguments| while_block
nested_block: _INDENT block+ _DEDENT
start: _NL? block*

_WS: (" ")+
INT_TYPE: "int"
BOOLEAN_TYPE: "boolean"
FLOAT_TYPE: "float"
STRING_TYPE: "string"
OBJECT_TYPE: "object"
REGEXP_TYPE: "regex"
FUNCTION_TYPE: "function"
TIME_TYPE: "time"
ANY_TYPE: "any"
_OSB: "["
_CSB: "]"
_COMMA: ","
_LIST_KEYWORD: "List"
_MAP_KEYWORD: "Map"
_NL: /(\r?\n[\t ]*)+/
_INDENT: "<INDENT>"
_DEDENT: "<DEDENT>"
TRUE: "true"
FALSE: "false"
NULL: "null"
RAW_INT.2: /[0-9]+/
INT.2: ("+"|"-")? RAW_INT
FLOAT.2: ("+"|"-")? INT "." RAW_INT? | "." RAW_INT
SINGLE_QUOTED: /'([^'\\]*(?:\\(.|\n)[^'\\]*)*)'/
DOUBLE_QUOTED: /"([^"\\]*(?:\\(.|\n)[^"\\]*)*)"/
DOUBLE_QUOTED_HEREDOC.2: /"""(.|\n)*?"""/
REGEXP.10: /\/([^\/]*)\/g?i?m?s?u?y?/
NAME.1: /[a-zA-Z_][a-zA-Z-\/_0-9]*/
RAW_TIME.3: /([0-9]+(ms|[smhdw]))+/
_OCB: "{"
_CCB: "}"
_COLON: ":"
_OP: "("
_CP: ")"
EQUALS: "="
_DOT: "."
POWER: "^"
NOT: "!"
OR: "or"
AND: "and"
_AS: "as"
GREATER: ">"
GREATER_EQUAL: ">="
LESSER: "<"
LESSER_EQUAL: "<="
NOT_EQUAL: "!="
EQUAL: "=="
BSLASH.5: "/"
MULTIPLIER: "*"
MODULUS.5: "%"
PLUS.5: "+"
DASH.5: "-"
RETURN: "return"
BREAK: "break"
_IF: "if"
_ELSE: "else"
_FOREACH: "foreach"
_WHILE: "while"
_RETURNS: "returns"
_DOUBLE_DEDENT: "<DOUBLE_DEDENT>"
TRY: "try"
_CATCH: "catch"
FINALLY: "finally"
THROW: "throw"
_WHEN: "when"
SINGLE_LINE_COMMENT: /(\r?\n)?\s*#[^\n\r]*/
MULTI_LINE_COMMENT: /(\r?\n)?\s*#+##[^#](.|\n)*?###[^\n\r]*/

%ignore _WS
%ignore SINGLE_LINE_COMMENT
%ignore MULTI_LINE_COMMENT


